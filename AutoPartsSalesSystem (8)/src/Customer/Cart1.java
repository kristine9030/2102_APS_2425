package Customer;

import Admin.*;
import autopartssalessystem.*;
import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.List;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.showMessageDialog;
import javax.swing.table.DefaultTableModel;
import net.proteanit.sql.DbUtils;
import java.sql.SQLException;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;

public class Cart1 extends JFrame {

    private static final String DB_URL = "jdbc:mysql://localhost:3306/autopartssales_db"; // Adjust your URL if needed
    private static final String DB_USER = "root"; // Use your database username
    private static final String DB_PASSWORD = "your_password"; // Use your database password

    private JTextField productNameTextField;
    private JTextField quantityTextField;
    private JTextField priceTextField;

    private JTable myCartTable;
    private DefaultTableModel cartTableModel;
    private Connection conn;
    private int customerID;

    public Cart1(int customerID) {
        this.customerID = customerID;
        productNameTextField = new JTextField();
        quantityTextField = new JTextField();
        priceTextField = new JTextField();
        initComponents();
        DisplayCart();
        this.conn = conn;

        cartTable.getModel().addTableModelListener(e -> {
            double totalPrice = calculateTotalPrice(cartTable, 3); // Column index for price
            totalpricetableCartTextField.setText(String.format("%.2f", totalPrice));
        });

        checkouttable.getModel().addTableModelListener(e -> {
            double totalPrice = calculateTotalPrice(checkouttable, 3); // Column index for price
            totalpriceCheckOutTextField.setText(String.format("%.2f", totalPrice));
        });

    }

    private Cart1() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        cartpanel = new javax.swing.JDesktopPane();
        mycart = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        totalpricetableCartTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        EditBtn = new javax.swing.JButton();
        DeleteBtn = new javax.swing.JButton();
        CustomerBtn = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        cartTable = new javax.swing.JTable();
        checkoutbtn = new javax.swing.JButton();
        mycart2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        totalpriceCheckOutTextField = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        checkouttable = new javax.swing.JTable();
        placeorderbtn = new javax.swing.JButton();
        ReturnToCartBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        nameTxt3 = new javax.swing.JLabel();
        amountPayTextField = new javax.swing.JTextField();
        changeTextField = new javax.swing.JTextField();
        nameTxt6 = new javax.swing.JLabel();
        confirmOrderBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/logo.png"))); // NOI18N

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        cartpanel.setBackground(new java.awt.Color(221, 168, 7));

        javax.swing.GroupLayout cartpanelLayout = new javax.swing.GroupLayout(cartpanel);
        cartpanel.setLayout(cartpanelLayout);
        cartpanelLayout.setHorizontalGroup(
            cartpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1110, Short.MAX_VALUE)
        );
        cartpanelLayout.setVerticalGroup(
            cartpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 31, Short.MAX_VALUE)
        );

        jPanel1.add(cartpanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(-12, 0, 1110, -1));

        mycart.setBackground(new java.awt.Color(51, 51, 51));
        mycart.setForeground(new java.awt.Color(102, 102, 102));
        mycart.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel18.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setText("Total Cost");
        mycart.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 450, -1, 30));

        totalpricetableCartTextField.setBackground(new java.awt.Color(51, 51, 51));
        totalpricetableCartTextField.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        totalpricetableCartTextField.setForeground(new java.awt.Color(255, 204, 0));
        totalpricetableCartTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalpricetableCartTextFieldActionPerformed(evt);
            }
        });
        mycart.add(totalpricetableCartTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 450, 140, 30));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("MY CART");
        mycart.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 50, 145, -1));
        mycart.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(919, 6, 191, 238));

        EditBtn.setBackground(new java.awt.Color(51, 51, 51));
        EditBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        EditBtn.setText("Edit");
        EditBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                EditBtnMouseClicked(evt);
            }
        });
        EditBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditBtnActionPerformed(evt);
            }
        });
        mycart.add(EditBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 460, 85, -1));

        DeleteBtn.setBackground(new java.awt.Color(51, 51, 51));
        DeleteBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        DeleteBtn.setText("Delete");
        DeleteBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DeleteBtnMouseClicked(evt);
            }
        });
        DeleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteBtnActionPerformed(evt);
            }
        });
        mycart.add(DeleteBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 460, 85, -1));

        CustomerBtn.setBackground(new java.awt.Color(210, 161, 12));
        CustomerBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        CustomerBtn.setForeground(new java.awt.Color(51, 51, 51));
        CustomerBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/home.png"))); // NOI18N
        CustomerBtn.setText("back to main menu");
        CustomerBtn.setBorderPainted(false);
        CustomerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CustomerBtnActionPerformed(evt);
            }
        });
        mycart.add(CustomerBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 560, -1, -1));

        cartTable.setBackground(new java.awt.Color(153, 153, 153));
        cartTable.setForeground(new java.awt.Color(51, 51, 51));
        cartTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ProductID", "Name", "Quantity", "Price"
            }
        ));
        cartTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        cartTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cartTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(cartTable);

        jScrollPane4.setViewportView(jScrollPane1);

        mycart.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, 630, 350));

        checkoutbtn.setBackground(new java.awt.Color(204, 153, 0));
        checkoutbtn.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        checkoutbtn.setForeground(new java.awt.Color(0, 0, 0));
        checkoutbtn.setText("Checkout");
        checkoutbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkoutbtnActionPerformed(evt);
            }
        });
        mycart.add(checkoutbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 500, 140, 40));

        jPanel1.add(mycart, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 30, 670, 630));

        mycart2.setBackground(new java.awt.Color(255, 255, 255));
        mycart2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("CHECKOUT");
        mycart2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 40, 145, -1));

        jLabel21.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(0, 0, 0));
        jLabel21.setText("Total Cost");
        mycart2.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 370, -1, 30));

        totalpriceCheckOutTextField.setBackground(new java.awt.Color(51, 51, 51));
        totalpriceCheckOutTextField.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        totalpriceCheckOutTextField.setForeground(new java.awt.Color(255, 204, 0));
        totalpriceCheckOutTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalpriceCheckOutTextFieldActionPerformed(evt);
            }
        });
        mycart2.add(totalpriceCheckOutTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 370, 130, 30));

        checkouttable.setBackground(new java.awt.Color(204, 204, 204));
        checkouttable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ProductID", "ProductName", "Quantity", "Price"
            }
        ));
        checkouttable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                checkouttableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(checkouttable);

        mycart2.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 80, 370, 280));

        placeorderbtn.setBackground(new java.awt.Color(0, 0, 0));
        placeorderbtn.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        placeorderbtn.setForeground(new java.awt.Color(255, 255, 255));
        placeorderbtn.setText("PLACE ORDER");
        placeorderbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                placeorderbtnActionPerformed(evt);
            }
        });
        mycart2.add(placeorderbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 560, 350, 40));

        ReturnToCartBtn.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        ReturnToCartBtn.setText("Return");
        ReturnToCartBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReturnToCartBtnActionPerformed(evt);
            }
        });
        mycart2.add(ReturnToCartBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 520, -1, -1));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(204, 153, 0));
        jLabel2.setText("PAYMENT");
        mycart2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 400, 93, 29));

        nameTxt3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        nameTxt3.setForeground(new java.awt.Color(51, 51, 51));
        nameTxt3.setText("Amount Pay: ");
        mycart2.add(nameTxt3, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 440, -1, -1));

        amountPayTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                amountPayTextFieldActionPerformed(evt);
            }
        });
        mycart2.add(amountPayTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 470, 240, 30));

        changeTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeTextFieldActionPerformed(evt);
            }
        });
        mycart2.add(changeTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 430, 240, 30));

        nameTxt6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        nameTxt6.setForeground(new java.awt.Color(51, 51, 51));
        nameTxt6.setText("Change: ");
        mycart2.add(nameTxt6, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 470, -1, -1));

        confirmOrderBtn.setBackground(new java.awt.Color(204, 153, 0));
        confirmOrderBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        confirmOrderBtn.setForeground(new java.awt.Color(255, 255, 255));
        confirmOrderBtn.setText("Confirm Order");
        confirmOrderBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        confirmOrderBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        confirmOrderBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmOrderBtnActionPerformed(evt);
            }
        });
        mycart2.add(confirmOrderBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 520, -1, 30));

        jPanel1.add(mycart2, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 30, 430, 630));

        jLabel3.setBackground(new java.awt.Color(204, 204, 204));
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/Cars Parts (2).jpg"))); // NOI18N
        jLabel3.setText("jLabel1");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(-190, 30, 1320, 630));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1097, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 6, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CustomerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CustomerBtnActionPerformed

        CustomerDashboard customerdashboard = new CustomerDashboard(this.customerID);
        customerdashboard.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_CustomerBtnActionPerformed

    private void totalpricetableCartTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalpricetableCartTextFieldActionPerformed
        cartTable.getModel().addTableModelListener(e -> {
            double totalPrice = calculateTotalPrice(cartTable, 3); // Column index for price
            totalpricetableCartTextField.setText(String.format("%.2f", totalPrice));
        });
    }//GEN-LAST:event_totalpricetableCartTextFieldActionPerformed

    private void EditBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_EditBtnMouseClicked

    }//GEN-LAST:event_EditBtnMouseClicked

    private void EditBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = cartTable.getSelectedRow();

        if (selectedRow >= 0) { // Ensure a row is selected
            // Check the number of columns in the table
            int columnCount = cartTable.getColumnCount();
            if (columnCount < 4) {
                JOptionPane.showMessageDialog(this, "Cart table doesn't have enough columns.");
                return;
            }

            // Get the values from the selected row (orderID, productID, productName, quantity, and price)
            String orderID = cartTable.getValueAt(selectedRow, 0).toString();
            String productID = cartTable.getValueAt(selectedRow, 1).toString();
            String productName = cartTable.getValueAt(selectedRow, 2).toString();
            String quantity = cartTable.getValueAt(selectedRow, 3).toString();
            // If there's a price column, make sure it's within the bounds
            String price = (columnCount > 4) ? cartTable.getValueAt(selectedRow, 4).toString() : "0.00"; // Default to "0.00" if no price column

            // Show the values in input fields for editing
            productNameTextField.setText(productName);
            quantityTextField.setText(quantity);
            priceTextField.setText(price);

            // Confirm edit action
            int result = JOptionPane.showConfirmDialog(this,
                    "Are you sure you want to edit this item?",
                    "Edit Item", JOptionPane.YES_NO_OPTION);

            if (result == JOptionPane.YES_OPTION) {
                // Prepare the SQL query for updating the item in the database
                String updateQuery = "UPDATE `order` SET productName = ?, quantity = ?, price = ?, totalPrice = ? WHERE orderID = ? AND productID = ?";

                try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD); PreparedStatement stmt = conn.prepareStatement(updateQuery)) {

                    // Calculate the total price for the item
                    // Parsing quantity as Integer and price as Double
                    int quantityInt = Integer.parseInt(quantity); // Parse quantity as Integer
                    double priceDouble = Double.parseDouble(price); // Parse price as Double
                    double totalPrice = quantityInt * priceDouble; // Calculate total price

                    // Set the parameters for the query
                    stmt.setString(1, productName); // productName
                    stmt.setInt(2, quantityInt); // quantity
                    stmt.setDouble(3, priceDouble); // price
                    stmt.setDouble(4, totalPrice); // totalPrice
                    stmt.setString(5, orderID); // orderID
                    stmt.setString(6, productID); // productID

                    // Execute the update query
                    int rowsAffected = stmt.executeUpdate();

                    if (rowsAffected > 0) {
                        JOptionPane.showMessageDialog(this, "Item updated successfully.");
                        // Update the cartTable with new values
                        cartTable.setValueAt(productName, selectedRow, 2);
                        cartTable.setValueAt(quantity, selectedRow, 3);
                        cartTable.setValueAt(price, selectedRow, 4);

                        // Recalculate the total price after editing
                        double newTotalPrice = calculateTotalPrice(cartTable, 4); // Assuming price is in column 4
                        totalpricetableCartTextField.setText(String.format("%.2f", newTotalPrice));
                    } else {
                        JOptionPane.showMessageDialog(this, "Failed to update item.");
                    }

                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, "Error updating item: " + ex.getMessage());
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(this, "Invalid input format. Please enter a valid number for quantity and price.");
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select an item to edit.");
        }
    }//GEN-LAST:event_EditBtnActionPerformed

    private void DeleteBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DeleteBtnMouseClicked

    }//GEN-LAST:event_DeleteBtnMouseClicked

    private void DeleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteBtnActionPerformed
        int selectedRow = cartTable.getSelectedRow();

        if (selectedRow >= 0) { // Ensure a row is selected
            // Get the orderID and productID from the selected row
            String orderID = cartTable.getValueAt(selectedRow, 0).toString();
            String productID = cartTable.getValueAt(selectedRow, 1).toString();

            // Confirm deletion with the user
            int result = JOptionPane.showConfirmDialog(this,
                    "Are you sure you want to delete this item from the cart?",
                    "Delete Item", JOptionPane.YES_NO_OPTION);

            if (result == JOptionPane.YES_OPTION) {
                // Update the table name if needed (e.g., `order` -> `orders` or similar)
                String deleteQuery = "DELETE FROM `order` WHERE orderID = ? AND productID = ?"; // Use backticks for reserved keywords

                try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD); PreparedStatement stmt = conn.prepareStatement(deleteQuery)) {

                    // Set the parameters for the query (orderID and productID)
                    stmt.setString(1, orderID);
                    stmt.setString(2, productID);

                    // Execute the DELETE query
                    int rowsAffected = stmt.executeUpdate();

                    if (rowsAffected > 0) {
                        JOptionPane.showMessageDialog(this, "Item deleted successfully.");

                        // Remove the selected row from the cartTable (GUI)
                        ((DefaultTableModel) cartTable.getModel()).removeRow(selectedRow);

                        // Recalculate the total price after deletion
                        double totalPrice = calculateTotalPrice(cartTable, 4); // Assuming price is in column 4
                        totalpricetableCartTextField.setText(String.format("%.2f", totalPrice));
                    } else {
                        JOptionPane.showMessageDialog(this, "Failed to delete item.");
                    }

                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, "Error deleting item: " + ex.getMessage());
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select an item to delete.");
        }
    }//GEN-LAST:event_DeleteBtnActionPerformed

    private void checkoutbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkoutbtnActionPerformed

        DefaultTableModel cartModel = (DefaultTableModel) cartTable.getModel();
        DefaultTableModel checkoutModel = (DefaultTableModel) checkouttable.getModel();

        if (cartModel.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "Cart is empty. Please add items before placing an order.");
            return;
        }

        // Clear old data in checkout table
        checkoutModel.setRowCount(0);

        for (int i = 0; i < cartModel.getRowCount(); i++) {
            Object[] rowData = new Object[cartTable.getColumnCount()]; // Match actual column count
            for (int j = 0; j < cartTable.getColumnCount(); j++) {

                rowData[j] = cartTable.getValueAt(i, j); // Safely access
            }
            checkoutModel.addRow(rowData);
        }

        // Clear cart table
        cartModel.setRowCount(0);

        saveOrderToDatabase(); // Call method to save order
        JOptionPane.showMessageDialog(this, "Order has been placed successfully.");
    }//GEN-LAST:event_checkoutbtnActionPerformed

    private int generateNewOrderID(Connection conn) throws SQLException {
        String sql = "SELECT MAX(orderID) FROM orders";
        PreparedStatement pstmt = conn.prepareStatement(sql);
        ResultSet rs = pstmt.executeQuery();
        int newOrderID = 1; // Default ID for the first order
        if (rs.next() && rs.getInt(1) != 0) {
            newOrderID = rs.getInt(1) + 1;
        }
        rs.close();
        pstmt.close();
        return newOrderID;
    }


    private void cartTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cartTableMouseClicked
        // TODO add your handling code here:
        int selectedRow = cartTable.getSelectedRow(); // Get selected row index
        if (selectedRow >= 0) {
            String productID = cartTable.getValueAt(selectedRow, 0).toString(); // Assuming column 0 is Product ID
            String productName = cartTable.getValueAt(selectedRow, 1).toString(); // Assuming column 1 is Product Name
            String quantity = cartTable.getValueAt(selectedRow, 2).toString(); // Assuming column 2 is Quantity
            String price = cartTable.getValueAt(selectedRow, 3).toString(); // Assuming column 3 is Price

            // Display details in a dialog or use them elsewhere
            JOptionPane.showMessageDialog(this,
                    "Product Details:\n"
                    + "ID: " + productID + "\n"
                    + "Name: " + productName + "\n"
                    + "Quantity: " + quantity + "\n"
                    + "Price: " + price
            );
        }

        // Update total price in totalpricetableCartTextField
        double totalPrice = calculateTotalPrice(cartTable, 3); // Assuming column 3 has prices
        totalpricetableCartTextField.setText(String.format("%.2f", totalPrice));
    }//GEN-LAST:event_cartTableMouseClicked

    private void ReturnToCartBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReturnToCartBtnActionPerformed
        // TODO add your handling code here:
        DefaultTableModel cartModel = (DefaultTableModel) cartTable.getModel();
        DefaultTableModel checkoutModel = (DefaultTableModel) checkouttable.getModel();

        if (checkoutModel.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "Checkout table is empty. No items to return to cart.");
            return;
        }

        // Clear old data in cart table
        cartModel.setRowCount(0);

        // Loop through the checkout table and move the data back to cart table
        for (int i = 0; i < checkoutModel.getRowCount(); i++) {
            Object[] rowData = new Object[checkouttable.getColumnCount()]; // Match actual column count
            for (int j = 0; j < checkouttable.getColumnCount(); j++) {

                rowData[j] = checkouttable.getValueAt(i, j); // Safely access
            }
            cartModel.addRow(rowData); // Add the row back to the cart table
        }

        // Clear checkout table
        checkoutModel.setRowCount(0);

        JOptionPane.showMessageDialog(this, "Items have been returned to the cart successfully.");
    }//GEN-LAST:event_ReturnToCartBtnActionPerformed

    private void placeorderbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_placeorderbtnActionPerformed
        DefaultTableModel checkoutModel = (DefaultTableModel) checkouttable.getModel();

        if (checkoutModel.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "Checkout table is empty. Please proceed to checkout first.");
            return;
        }

        Connection conn = null;
        PreparedStatement pstmt = null;

        try {
            // Establish database connection
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/autopartssales_db", "root", "your_password");

            // Create a new order ID (this depends on how you handle orders in your database)
            int orderID = generateNewOrderID(conn);

            // Iterate through checkout table rows
            for (int i = 0; i < checkoutModel.getRowCount(); i++) {
                int productID = Integer.parseInt(checkoutModel.getValueAt(i, 0).toString());
                String productName = checkoutModel.getValueAt(i, 1).toString();
                int quantity = Integer.parseInt(checkoutModel.getValueAt(i, 2).toString());
                double price = Double.parseDouble(checkoutModel.getValueAt(i, 3).toString());
                double subtotal = price * quantity;

                // Insert product details into the orderdetails table
                String sql = "INSERT INTO orderdetails (orderID, productID, productName, price, quantity, subtotal) VALUES (?, ?, ?, ?, ?, ?)";
                pstmt = conn.prepareStatement(sql);
                pstmt.setInt(1, orderID);
                pstmt.setInt(2, productID);
                pstmt.setString(3, productName);
                pstmt.setDouble(4, price);
                pstmt.setInt(5, quantity);
                pstmt.setDouble(6, subtotal);
                pstmt.executeUpdate();
            }

            JOptionPane.showMessageDialog(this, "Order placed successfully!");
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error placing the order: " + e.getMessage());
        } finally {
            // Close resources
            try {
                if (pstmt != null) {
                    pstmt.close();
                }
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_placeorderbtnActionPerformed

    private void checkouttableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_checkouttableMouseClicked
        // TODO add your handling code here:
        int selectedRow = checkouttable.getSelectedRow(); // Get selected row index
        if (selectedRow >= 0) {
            String productName = checkouttable.getValueAt(selectedRow, 1).toString(); // Assuming column 1 is Product Name
            String brand = checkouttable.getValueAt(selectedRow, 2).toString(); // Assuming column 2 is Brand
            String price = checkouttable.getValueAt(selectedRow, 4).toString(); // Assuming column 4 is Price

            // Display details in a dialog or use them elsewhere
            JOptionPane.showMessageDialog(this,
                    "Checkout Item Details:\n"
                    + "Name: " + productName + "\n"
                    + "Brand: " + brand + "\n"
                    + "Price: " + price
            );
        }

        // Update total price in totalpriceCheckOutTextField
        double totalPrice = calculateTotalPrice(checkouttable, 3); // Assuming column 3 has prices
        totalpriceCheckOutTextField.setText(String.format("%.2f", totalPrice));
    }//GEN-LAST:event_checkouttableMouseClicked

    private void totalpriceCheckOutTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalpriceCheckOutTextFieldActionPerformed
        // TODO add your handling code here:
        checkouttable.getModel().addTableModelListener(e -> {
            double totalPrice = calculateTotalPrice(checkouttable, 3); // Column index for price
            totalpriceCheckOutTextField.setText(String.format("%.2f", totalPrice));
        });
    }//GEN-LAST:event_totalpriceCheckOutTextFieldActionPerformed

    private void confirmOrderBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmOrderBtnActionPerformed
        try {
            // Get the total cost and amount paid from the text fields
            double totalCost = Double.parseDouble(totalpriceCheckOutTextField.getText().replace("Php ", "").trim());
            double amountPay = Double.parseDouble(amountPayTextField.getText().replace("Php ", "").trim());

            // Check if the amount paid is sufficient
            if (amountPay >= totalCost) {
                // Calculate the change
                double change = amountPay - totalCost;

                // Display the change in the changeTextField
                changeTextField.setText(String.format("%.2f", change));

                // Show confirmation message
                javax.swing.JOptionPane.showMessageDialog(this, "Order successfully placed!", "Success", javax.swing.JOptionPane.INFORMATION_MESSAGE);
            } else {
                // Show an error message if the amount is insufficient
                javax.swing.JOptionPane.showMessageDialog(this, "Insufficient amount paid. Please enter a valid amount.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
        } catch (NumberFormatException e) {
            // Handle invalid input (non-numeric)
            javax.swing.JOptionPane.showMessageDialog(this, "Invalid input. Please enter numeric values.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_confirmOrderBtnActionPerformed

    private void amountPayTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_amountPayTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_amountPayTextFieldActionPerformed

    private void changeTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_changeTextFieldActionPerformed

    private void DisplayCart() {
        try {
            // Establish connection to the database
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/autopartssales_db", "root", "your_password");
            Statement st = con.createStatement();

            // Adjust the query to select items based on the customerID
            String query = "SELECT productID AS 'Product ID', productName AS 'Name', quantity AS 'Quantity', price AS 'Price' "
                    + "FROM orders WHERE customerID = " + this.customerID;

            // Execute the query
            ResultSet rs = st.executeQuery(query);

            // Display result in cartTable
            cartTable.setModel(DbUtils.resultSetToTableModel(rs));

            // Attach TableModelListener to recalculate total price when the table data changes
            cartTable.getModel().addTableModelListener(e -> {
                double totalPrice = calculateTotalPrice(cartTable, 3); // Column index for price
                totalpricetableCartTextField.setText(String.format("%.2f", totalPrice));
            });

            // Initial total price calculation
            double totalPrice = calculateTotalPrice(cartTable, 3); // Assuming column 3 is price
            totalpricetableCartTextField.setText(String.format("%.2f", totalPrice));

            con.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error displaying cart: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void saveOrderToDatabase() {
        DefaultTableModel cartModel = (DefaultTableModel) cartTable.getModel();

        // Assuming the cart table is correctly populated with customer-specific items
        for (int i = 0; i < cartModel.getRowCount(); i++) {
            // Validate column indices before accessing values
            if (cartTable.getColumnCount() > 3) { // Ensure valid column index
                String productID = cartTable.getValueAt(i, 0).toString(); // Assuming 0 is Product ID
                String productName = cartTable.getValueAt(i, 1).toString(); // Assuming 1 is Product Name
                String quantity = cartTable.getValueAt(i, 2).toString(); // Assuming 2 is Quantity
                String price = cartTable.getValueAt(i, 3).toString(); // Assuming 3 is Price

                // Insert order details into the orders table (make sure to match schema)
                String sql = "INSERT INTO orders (customerID, productID, productName, quantity, price) VALUES (?, ?, ?, ?, ?)";
                try (Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/autopartssales_db", "root", "your_password"); PreparedStatement pstmt = con.prepareStatement(sql)) {

                    pstmt.setInt(1, this.customerID); // Set customerID for this order
                    pstmt.setString(2, productID);
                    pstmt.setString(3, productName);
                    pstmt.setString(4, quantity);
                    pstmt.setString(5, price);

                    pstmt.executeUpdate();
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(this, "Error saving order to database: " + e.getMessage());
                }
            } else {
                System.out.println("Invalid column index for row: " + i);
            }
        }
    }

    private double calculateTotalPrice(JTable table, int priceColumnIndex) {
        double totalPrice = 0.0;
        DefaultTableModel tableModel = (DefaultTableModel) table.getModel();

        for (int i = 0; i < tableModel.getRowCount(); i++) {
            try {
                Object priceObj = tableModel.getValueAt(i, priceColumnIndex);
                if (priceObj != null) {
                    double price = Double.parseDouble(priceObj.toString());
                    totalPrice += price;
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this,
                        "Error reading price value on row " + (i + 1) + ": " + e.getMessage());
            }
        }
        return totalPrice;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Cart1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Cart1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Cart1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Cart1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Cart1().setVisible(true);
            }
        });
    }

    private void updateCartItemInDatabase(String productID, String productName, int quantity, double price) {
        String sql = "UPDATE cart SET productName = ?, quantity = ?, price = ? WHERE productID = ?";

        try (Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/autopartssales_db", "root", "your_password"); PreparedStatement stmt = con.prepareStatement(sql)) {

            stmt.setString(1, productName);
            stmt.setInt(2, quantity);
            stmt.setDouble(3, price);
            stmt.setString(4, productID);

            stmt.executeUpdate();
            JOptionPane.showMessageDialog(this, "Item updated successfully in the database.");
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error updating item: " + e.getMessage());
        }
    }

    private void deleteCartItemFromDatabase(String productID) {
        String sql = "DELETE FROM cart WHERE productID = ?";

        try (Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/autopartssales_db", "root", "your_password"); PreparedStatement stmt = con.prepareStatement(sql)) {

            stmt.setString(1, productID);
            stmt.executeUpdate();
            JOptionPane.showMessageDialog(this, "Item deleted successfully from the database.");
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error deleting item: " + e.getMessage());
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CustomerBtn;
    private javax.swing.JButton DeleteBtn;
    private javax.swing.JButton EditBtn;
    private javax.swing.JButton ReturnToCartBtn;
    private javax.swing.JTextField amountPayTextField;
    private javax.swing.JTable cartTable;
    private javax.swing.JDesktopPane cartpanel;
    private javax.swing.JTextField changeTextField;
    private javax.swing.JButton checkoutbtn;
    private javax.swing.JTable checkouttable;
    private javax.swing.JButton confirmOrderBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPanel mycart;
    private javax.swing.JPanel mycart2;
    private javax.swing.JLabel nameTxt3;
    private javax.swing.JLabel nameTxt6;
    private javax.swing.JButton placeorderbtn;
    private javax.swing.JTextField totalpriceCheckOutTextField;
    private javax.swing.JTextField totalpricetableCartTextField;
    // End of variables declaration//GEN-END:variables

    private int getCurrentCustomerID() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

}
